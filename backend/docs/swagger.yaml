basePath: /api
definitions:
  models.Book:
    properties:
      author:
        maxLength: 255
        type: string
      book_attrs:
        $ref: '#/definitions/models.BookAttrs'
      book_status:
        type: integer
      created_at:
        type: string
      id:
        type: string
      title:
        maxLength: 255
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    required:
    - author
    - book_attrs
    - book_status
    - id
    - title
    - user_id
    type: object
  models.BookAttrs:
    properties:
      description:
        type: string
      picture:
        type: string
      rating:
        maximum: 10
        minimum: 1
        type: integer
    type: object
  models.Collection:
    properties:
      alias:
        type: string
      collection_id:
        type: integer
      created_at:
        description: Set to current time if it is zero on creating
        type: string
      description:
        type: string
      gateway:
        type: string
      id:
        type: integer
      image:
        $ref: '#/definitions/models.CollectionImage'
      is_featured:
        type: integer
      name:
        type: string
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      store_id:
        type: integer
      updated_at:
        description: Set to current unix seconds on updating or if it is zero on creating
        type: string
      user_app_token_id:
        type: integer
    required:
    - name
    - store_id
    type: object
  models.CollectionImage:
    properties:
      created_on:
        type: string
      id:
        type: integer
      src:
        type: string
    type: object
  models.Option:
    properties:
      id:
        type: integer
      name:
        type: string
      position:
        type: integer
      product_id:
        type: integer
      values:
        items:
          type: string
        type: array
    type: object
  models.Product:
    properties:
      alias:
        type: string
      content:
        type: string
      created_at:
        type: string
      created_on:
        type: string
      gateway:
        type: string
      id:
        type: integer
      images:
        items:
          $ref: '#/definitions/models.ProductImage'
        type: array
      is_charge_tax:
        type: integer
      modified_on:
        type: string
      name:
        type: string
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      price:
        type: number
      product_id:
        type: integer
      product_status:
        type: string
      product_type:
        type: string
      published_on:
        type: string
      status:
        type: string
      store_id:
        type: integer
      summary:
        type: string
      tags:
        type: string
      updated_at:
        type: string
      user_app_token_id:
        type: integer
      variants:
        items:
          $ref: '#/definitions/models.Variant'
        type: array
      vendor:
        type: string
    required:
    - content
    - gateway
    - name
    - price
    - store_id
    type: object
  models.ProductImage:
    properties:
      created_on:
        type: string
      id:
        type: integer
      modified_on:
        type: string
      position:
        type: integer
      product_id:
        type: integer
      src:
        type: string
      variant_ids:
        items:
          type: integer
        type: array
    type: object
  models.Response:
    properties:
      data: {}
      error:
        type: boolean
      msg:
        type: string
    type: object
  models.Token:
    properties:
      access:
        type: string
      refresh:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        description: Set to current time if it is zero on creating
        type: string
      email:
        maxLength: 255
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      password_hash:
        maxLength: 255
        type: string
      phone_number:
        maxLength: 255
        type: string
      updated_at:
        description: Set to current unix seconds on updating or if it is zero on creating
        type: string
      user_image:
        type: string
      user_role:
        maxLength: 25
        type: string
      user_status:
        type: integer
    required:
    - email
    - user_role
    - user_status
    type: object
  models.Variant:
    properties:
      barcode:
        type: string
      created_on:
        type: string
      grams:
        type: integer
      id:
        type: integer
      image_id:
        type: integer
      inventory_management:
        type: string
      inventory_quantity:
        type: integer
      modified_on:
        type: string
      option1:
        type: string
      option2:
        type: string
      option3:
        type: string
      position:
        type: integer
      price:
        type: number
      product_id:
        type: integer
      requires_shipping:
        type: boolean
      sku:
        type: string
      title:
        type: string
      weight:
        type: number
      weight_unit:
        type: string
    type: object
info:
  contact:
    email: your@mail.com
    name: API Support
  description: This is an auto-generated API Docs.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: API
  version: "1.0"
paths:
  /collections:
    post:
      consumes:
      - multipart/form-data
      description: This endpoint creates a new collection for a user's store based
        on the data provided in a file sent in the request body. The file should be
        in CSV or JSON format and contain the necessary data for creating a collection.
        The user must be authenticated and authorized to create collections for the
        specified store.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: CSV or JSON file containing the collection data
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/models.Collection'
        "400":
          description: error
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Creates a new collection for a user's store.
      tags:
      - Collections
  /collections/featured:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the featured collection for a user's store
        based on the provided query parameters. The query parameters can include an
        "includes" parameter to include the collection's products.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the store to retrieve the featured collection for
        in: query
        name: store_id
        required: true
        type: integer
      - description: 'Array of strings specifying what data to include in the response.
          Valid values are: products.'
        in: query
        items:
          type: string
        name: includes
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/models.Collection'
        "400":
          description: error
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Retrieves the featured collection for a user's store.
      tags:
      - Collections
  /v1/book:
    delete:
      consumes:
      - application/json
      description: Delete book by given ID.
      parameters:
      - description: Book ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: delete book by given ID
      tags:
      - Book
    post:
      consumes:
      - application/json
      description: Create a new book.
      parameters:
      - description: Title
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: Author
        in: body
        name: author
        required: true
        schema:
          type: string
      - description: User ID
        in: body
        name: user_id
        required: true
        schema:
          type: string
      - description: Book attributes
        in: body
        name: book_attrs
        required: true
        schema:
          $ref: '#/definitions/models.BookAttrs'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      security:
      - ApiKeyAuth: []
      summary: create a new book
      tags:
      - Book
    put:
      consumes:
      - application/json
      description: Update book.
      parameters:
      - description: Book ID
        in: body
        name: id
        required: true
        schema:
          type: string
      - description: Title
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: Author
        in: body
        name: author
        required: true
        schema:
          type: string
      - description: User ID
        in: body
        name: user_id
        required: true
        schema:
          type: string
      - description: Book status
        in: body
        name: book_status
        required: true
        schema:
          type: integer
      - description: Book attributes
        in: body
        name: book_attrs
        required: true
        schema:
          $ref: '#/definitions/models.BookAttrs'
      produces:
      - application/json
      responses:
        "202":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: update book
      tags:
      - Book
  /v1/book/{id}:
    get:
      consumes:
      - application/json
      description: Get book by given ID.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      summary: get book by given ID
      tags:
      - Book
  /v1/books:
    get:
      consumes:
      - application/json
      description: Get all exists books.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: get all exists books
      tags:
      - Books
  /v1/kiotviet/create-user:
    post:
      consumes:
      - application/json
      description: Create Kiotviet user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: create Kiotviet user
      tags:
      - KiotViet
  /v1/oauth/google/callback:
    get:
      consumes:
      - application/json
      description: Get data from Google and create/update user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Token'
      summary: get user data from google.
      tags:
      - User
  /v1/oauth/google/login:
    get:
      consumes:
      - application/json
      description: Generate authenticate URL.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: generate authenticate URL.
      tags:
      - User
  /v1/sapo/get-auth-url:
    get:
      consumes:
      - application/json
      description: Get Sapo authenticate URL
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: get authenticate URL
      tags:
      - Sapo
  /v1/sapo/get-token:
    get:
      consumes:
      - application/json
      description: Get Sapo user access token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: get access token
      tags:
      - Sapo
  /v1/token/renew:
    post:
      consumes:
      - application/json
      description: Renew access and refresh tokens.
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: renew access and refresh tokens
      tags:
      - Token
  /v1/user/create-password:
    post:
      consumes:
      - application/json
      description: Create new password for user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: int
      security:
      - ApiKeyAuth: []
      summary: create new password.
      tags:
      - User
  /v1/user/reset-password:
    post:
      consumes:
      - application/json
      description: Send email reset password.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: send email reset password.
      tags:
      - User
  /v1/user/sign/in:
    post:
      consumes:
      - application/json
      description: Auth user and return access and refresh token.
      parameters:
      - description: User Email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: User Password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: auth user and return access and refresh token
      tags:
      - User
  /v1/user/sign/out:
    post:
      consumes:
      - application/json
      description: De-authorize user and delete refresh token from Redis.
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: de-authorize user and delete refresh token from Redis
      tags:
      - User
  /v1/user/sign/up:
    post:
      consumes:
      - application/json
      description: Create a new user.
      parameters:
      - description: Email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Password
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: User role
        in: body
        name: user_role
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: create a new user
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
